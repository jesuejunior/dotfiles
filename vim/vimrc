" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2008 Jul 02
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif


set ts=2
set sw=2
set et


call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

"General settings

" Auto load when file is changed
set autoread

" Move backups off of current dir
set backupdir=~/.vim/.backups,.,/tmp

"Ctrl+F4 closes current buffer

nnoremap <C-F4> :close<cr>

let mapleader="_"

" Opens .vimrc at any time, in a new tab
nnoremap <Leader>v :tabedit $MYVIMRC<cr>

" Ctrl+O opens the file browse dialog
nnoremap <c-O> :confirm browse e<CR>
inoremap <c-O> <esc>:confirm browse e<CR>

" Toggle current word case
inoremap <A-u> <esc>viw~i
nnoremap <A-u> viw~

set wildignore+=*.py~,build/*.*

" For closetag plugin
autocmd FileType html,htmldjango,jinjahtml,eruby,mako let b:closetag_html_style=1
autocmd FileType html,xhtml,xml,htmldjango,jinjahtml,eruby,mako source ~/.vim/bundle/closetag/plugin/closetag.vim

" Tagbar
let g:tagbar_usearrows = 1
noremap <Leader>l :TagbarToggle<CR>

" NERDTree
noremap <Leader>n :NERDTreeToggle<CR>


" For solarized color scheme
set background=dark
let g:solarized_termtrans=1
let g:solarized_termcolors=256
let g:solarized_contrast="high"
let g:solarized_visibility="high"
colorscheme solarized

" New tab
noremap <C-t> :tabnew<CR>
noremap <leader>t :tab sball<CR>

" Show line numbers
set number

" For colors in terminal
set t_Co=256

" Disable pylint on every save
" let g:pymode_lint = 0


" Retira a barra de ferramentas e o Menu
set guioptions-=T
set guioptions-=m

" Alt+{Down,Up} moves current line
" http://vimcasts.org/episodes/bubbling-text/
nmap <A-Down> ]e
nmap <A-Up> [e

" Move in visual mode (for block od lines)
" http://vimcasts.org/episodes/bubbling-text/
vmap <A-Up> [egv
vmap <A-Down> ]egv

" Copy+Move current line
noremap <C-A-Down> yyp
noremap <C-A-Up> yyP

" Mappings for visual mode (Still needs to select the whole lines...)
vnoremap <C-A-Down> mzy`zp 
vnoremap <C-A-Up> yP


" Thanks to denilsonsa
function! Salvar_setKeys()
	"Use Ctrl+S to save
	nnoremap <silent> <C-S>      :update<CR>
	vnoremap <silent> <C-S> <C-C>:update<CR>
	inoremap <silent> <C-S> <C-O>:update<CR>

	nnoremap <silent> <C-S-S>      :wall<CR>
	vnoremap <silent> <C-S-S> <C-C>:wall<CR>
	inoremap <silent> <C-S-S> <C-O>:wall<CR>
endfunc

au GUIEnter * call Salvar_setKeys()


" Auto source .vimrc after editing .vimrc
if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
endif


" For fugitive.vim
nnoremap <C-G><C-s> :Gstatus <cr>
nnoremap <C-G><C-c> :Gcommit <cr>
nnoremap <C-G><C-d> :Gdiff <cr>
nnoremap <C-G><C-p> :Git push <cr>


" Disable automatic python code folding
let g:pymode_folding = 0

" For Pytest
nnoremap <leader>R :Pytest class<cr>

" Some interesting annotations about vim commands

" Movendo janelas/splits ^W seguido de shift+ H ou J ou K ou L
" 
" i = insere antes do cursor
" a = insere após o cursor
" I = insere no início da linha (respeitando indentação)
" gI = insere no início da linha
" A = insere no final da linha
" 
" cc = change line
" dd = delete line
" cw = change word
" dw = delete word
" C = change until the end of the line
" D = delete until the end of the line
" Y = DOESN'T copy until EOL. :( (mas eu remapeei no meu vimrc)
" 
" ; = refaz o último f, F, t, T
" , = refaz o último f, F, t, T na direção contrária
" 
" di" = isso nao precisa do surround
" ci" = isso nao precisa do surround
" 
" gugu = lowercase line
" guu  = lowercase line
" gUU  = uppercase line
" gUgU = uppercase line
" gu ou gU seguido de movimento = similar ao d, y, c, ...
" ~ = toggle case of a character
" 
" Ctrl+A = incrementa
" Ctrl+X = decrementa
" 
" visual...
" Ctrl+V = visual (block)
" pode ser combinado com I ou A para inserir algo em todas as linhas
"
" H, M, L: Mode o cursor para uma posição da tela atual. High, Medium, Low
" ctrl+e (Up) e ctrl+y (Down) Scroll de uma linha por vez, sem mover o cursor
" 
"
" Macros:
" qa = inicia a gravação no registrador a (poderia ser qualquer letra)
" q = termina a gravação
" @a = executa a macro gravada em a
" @@ = re-executa a última macro
" 
" Copy-and-paste from different registers:
" "a = Usa o registrador a (veja :help registers para lista de registradores)
" "+ = buffer de ctrl+c e ctrl+v
" "* = buffer de X11 primary selection
" "/ = buffer de busca
" 
" No modo de inserção (ou na linha de :comando):
" ^R seguido de um registrador = insere o conteúdo daquele registrador
" 
" 
" No meu vimrc o Ctrl-S salva, F12 faz toggle de wrap, shift+F12 faz toggle de
" horizontal scrollbar.
" 
" Plugins legais:
" NERDTree
" Gundo
" speeddate (ou algo assim)
" 
" http://denilsonsa.selfip.org/~denilson/vimrc
autocmd BufRead,BufNewFile *.ino set filetype=cpp
