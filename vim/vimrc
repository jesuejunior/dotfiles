
" Font/text
" set guifont=Inconsolata\ for\ Powerline:h15
set guifont=Hack\ Nerd\ Font:h11
" let g:Powerline_symbols = 'fancy'
set t_Co=256
set fillchars+=stl:\ ,stlnc:\
"set term=xterm-256color
set termencoding=utf-8

" New font for VIM
if has("gui_running")
   let s:uname = system("uname")
   if s:uname == "Darwin\n"
      " set guifont=Inconsolata\ for\ Powerline:h15
	set guifont=Hack\ Nerd\ Font:h11
   endif
endif
let g:ycm_python_binary_path = '/usr/local/bin/python'
""" vim air-line
"

" (JJ) General
set nocompatible               	" be iMproved
filetype off                   	" required!
let mapleader="\<Space>"	    " change the leader to be the space
set backspace=indent,eol,start  " Allow backspacing over autoindent, EOL, and BOL 
set splitbelow
set backup                      " keep a backup file
set history=128                 " keep 50 lines of command line history
set ruler                       " show the cursor position all the time
set number                      " Display line numbers
set laststatus=2                " every window will show the statusline
set showcmd                     " display incomplete commands
set ts=2
set sw=2
set et
filetype plugin indent on     " required!
set autoindent              	" always set autoindenting on
set swapfile

" Helps when <tab> completing strings on vim's command line
set wildmenu                  	" Menu completion in command mode on <Tab>
set wildmode=list:longest      	" <Tab> cycles between all matching choices.
set backupdir=/tmp,~/.vim/.backups,.
set t_Co=256
set guioptions-=T
set guioptions-=m

" Searching and Patterns
set ignorecase                  " Default to using case insensitive searches,
set smartcase                   " unless uppercase letters are used in the regex.
set smarttab                    " Handle tabs more intelligently 
set hlsearch                    " Highlight searches by default.
set incsearch                   " Incrementally search while typing a /regex

if !has('nvim')
  set ttymouse=xterm2
endif

if has('nvim')
  tnoremap <Esc> <C-\><C-n>
endif

" Not validaed yet
set encoding=utf-8 		        " Necessary to show Unicode glyphs
set hidden			            " makes vim work like every other multiple-file editor
set title                     	" show title in console title bar

set numberwidth=1             	" using only 1 column (and 1 space) while possible
set grepprg=ack         	    " replace the default grep program with ack
set nowrap                  	" don't wrap text
set linebreak               	" don't wrap textin the middle of a word

set smartindent             	" use smart indent if there is no indent file
set tabstop=4               	" <tab> inserts 4 spaces 
set shiftwidth=4            	" but an indent level is 2 spaces wide.
set softtabstop=4           	" <BS> over an autoindent deletes both spaces.
set expandtab               	" Use spaces, not tabs, for autoindent/tab key.
set shiftround              	" rounds indent to a multiple of shiftwidth
set matchpairs+=<:>         	" show matching <> (html mainly) as well
set lazyredraw                  " do not redraw while running macros (much faster) (LazyRedraw)
set textwidth=120                " used by gqq or <VISUAL>gq command to format lines
set clipboard=unnamedplus       " make vim use the system clipboard by default
set paste

""" Mouse settings
"
set mouse=a

""" Ignore these files when completing
"
set wildignore+=*.o,*.obj,.git
set wildignore+=*.py~,build/*.*,*.class,*.pyc,__pycache__*
set wildignore+=eggs/**
set wildignore+=*.egg-info/**

""" Insert completion
" don't select first item, follow typing in autocomplete
set completeopt=menuone,longest,preview
" Keep a small completion window
set pumheight=6

""" Reading/Writing
"
set noautowrite                 " Never write a file unless I request it.
set noautowriteall              " NEVER.
set noautoread                  " Don't automatically re-read changed files. - DONE
set modeline                    " Allow vim options to be embedded in files;
set modelines=5                 " they must be within the first or last 5 lines.
set ffs=unix,dos,mac            " Try recognizing dos, unix, and mac line endings.

" Messages, Info, Status
set noerrorbells
set vb t_vb=                    " Disable all bells.  I hate ringing/flashing.
set confirm                     " Y-N-C prompt if closing with unsaved changes.

function! SourceFileIfExist(filename)
  let l:extra_file = fnamemodify(expand($MYVIMRC), ':p:h') . '/' . a:filename
  if filereadable(l:extra_file)
    execute ':so ' . l:extra_file
  endif
endfunc

" (VUNDLE) Plugin Installation

set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

""" Themes
Plugin 'josuegaleas/jay'
Plugin 'danielwe/base16-vim'
" Plugin 'Addisonbean/Vim-Xcode-Theme'
Plugin 'joshdick/onedark.vim'

""" Plugins

" NEW Plugins
" Dependenxy to janko-m/vim-test
Plugin 'tpope/vim-dispatch'
Plugin 'ervandew/supertab'
Plugin 'Lokaltog/powerline'
Plugin 'w0rp/ale'
Plugin 'janko-m/vim-test'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'alfredodeza/pytest.vim'
Plugin 'vim-ctrlspace/vim-ctrlspace'
Plugin 'bling/vim-airline'
Plugin 'jreybert/vimagit'
Plugin 'EinfachToll/DidYouMean'
Plugin 'elzr/vim-json' " checking for json files, highlighting errors
Plugin 'daltonmatos/vim-virtualenv'
Plugin 'terryma/vim-multiple-cursors' " Multiple selection feature into VIM

Plugin 'vim-scripts/CSApprox' " Make GVim colorschemes work with Vim
Plugin 'ntpeters/vim-better-whitespace' " Remove trailing spaces
Plugin 'Raimondi/delimitMate' " Autocomplete for quotes, brackets, etc

" html / css
Plugin 'vim-scripts/HTML-AutoCloseTag' " Autoclose HTML tags
Plugin 'hail2u/vim-css3-syntax'
Plugin 'gorodinskiy/vim-coloresque' " colorpreview #aaa
Plugin 'tpope/vim-haml'
Plugin 'othree/html5.vim'

" Old but works
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'Xuyuanp/nerdtree-git-plugin' "  Nerdtree Git file status
Plugin 'tiagofumo/vim-nerdtree-syntax-highlight' " enable colors for filetype
Plugin 'ryanoasis/vim-devicons' " Filetype icons support (requires patched font)
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'myusuf3/numbers.vim'
Plugin 'alvan/vim-closetag'
Plugin 'mileszs/ack.vim'

Plugin 'vim-scripts/tComment' """ comment lines, blocks e etc
Plugin 'sickill/vim-pasta' """Pasting in Vim with indentation adjusted to destination context.

" Plugin 'nvie/vim-flake8'
" Plugin 'majutsushi/tagbar'
" Plugin 'scrooloose/syntastic'
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
Plugin 'kien/ctrlp.vim'

" Plugin 'Rykka/os.vim'
" Plugin 'Rykka/riv.vim'

" Plugin 'davidhalter/jedi-vim'

""""Plugin 'Shougo/neocomplcache.vim'
"""Plugin 'tmhedberg/matchit'
"Plugin 'junegunn/vim-easy-align'

Plugin 'Valloric/MatchTagAlways'

" Plugin 'rizzatti/funcoo.vim'
" Plugin 'rizzatti/greper.vim'

" Plugin 'Valloric/YouCompleteMe'
" Plugin 'vim-scripts/IndexedSearch'

""" Syntax Plugin

" Plugin 'vim-scripts/nginx.vim'
" Plugin 'vim-scripts/apachelogs.vim'
" Plugin 'lepture/vim-jinja'
" Plugin 'olivierverdier/python-syntax.vim'
" Plugin 'othree/html5.vim'
" Plugin 'othree/javascript-libraries-syntax.vim'
" Plugin 'pangloss/vim-javascript'
" Plugin 'leafgarland/typescript-vim'
" Plugin 'mxw/vim-jsx'
"Plugin 'ekalinin/Dockerfile.vim'
"Plugin 'derekwyatt/vim-scala'
""""Plugin 'tpope/vim-rails'
""""Plugin 'tpope/vim-rake'
""""Plugin 'tpope/vim-rbenv'
"Plugin 'fatih/vim-go'
"Plugin 'chase/vim-ansible-yaml'
"Plugin 'elixir-lang/vim-elixir' """Elixir
" Plugin 'slashmili/alchemist.vim' """Elixir
Plugin 'racer-rust/vim-racer'
Plugin 'sheerun/vim-polyglot'
"Plugin 'cespare/vim-toml'

" Syntax schemes
Plugin 'PotatoesMaster/i3-vim-syntax'

call vundle#end()

""" Colors
"
syntax on
colorscheme "molokai_dark"
set colorcolumn=120
set background=dark
if has('termguicolors')
  set termguicolors
endif
set cursorline
hi ColorColumn ctermbg=red guibg=red
hi TabLineFill ctermfg=LightGray ctermbg=Black
hi TabLine ctermfg=Gray ctermbg=Black
hi TabLineSel ctermfg=White ctermbg=Red
hi CursorLine term=bold cterm=bold guibg=Grey40
hi visual ctermfg=black ctermbg=lightblue

let g:onedark_termcolors=256

syntax on
colorscheme onedark
" Thanks to @denilsonsa (https://github.com/{denilsonsa,daltonmatos})
function! Salvar_setKeys()
  "Use Ctrl+S to save
  nnoremap <silent> <C-S>      :update<CR>
  vnoremap <silent> <C-S> <C-C>:update<CR>
endfunc

augroup Salvar
  autocmd!
  autocmd GUIEnter * call Salvar_setKeys()
augroup END

" NERDTree devicons for folders
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1

""" Vim-Easy-Align
"
" Start interactive EasyAlign in visual mode
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign with a Vim movement
nmap <Leader>a <Plug>(EasyAlign)

""" javascript-libraries-syntax
"
let g:used_javascript_libs = 'jquery,angularjs,requirejs,reactjs'
autocmd BufReadPre *.js let b:javascript_lib_use_jquery = 1
autocmd BufReadPre *.js let b:javascript_lib_use_angularjs = 1
autocmd BufReadPre *.js let b:javascript_lib_use_requirejs = 1
autocmd BufReadPre *.jsx let b:javascript_lib_use_reacjs = 1
autocmd Filetype javascript setlocal ts=2 sts=2 sw=2
autocmd Filetype html setlocal ts=2 sts=2 sw=2
autocmd Filetype ruby setlocal ts=2 sts=2 sw=2

""" YAML files
"
autocmd FileType yaml setlocal ts=2 sts=2 sw=2
autocmd FileType yml setlocal ts=2 sts=2 sw=2

""" Make file
"
autocmd FileType make setlocal noexpandtab

""" Flake8
"
let g:flake8_max_line_length=120
let g:flake8_max_complexity=10

""" jedi-vim
"
autocmd FileType python setlocal completeopt-=preview
let g:jedi#popup_on_dot = 0

""" syntastic
"
let g:syntastic_enable_signs=1
let g:syntastic_auto_jump=0
let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'active_filetypes': ['python', 'php'],
                           \ 'passive_filetypes': ['puppet'] }
let g:syntastic_python_checkers=['flake8']
let g:syntastic_python_flake8_post_args='--ignore=E501,E128,E225'

""" NERDTree
"
let NERDTreeIgnore = ['\.pyc$', '__pycache__', '\.swp$']

""" CTRLP
"
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
    \ }
let g:ctrlp_working_path_mode = '0'

""" Disable Match Paren
"
let loaded_matchparen = 1

" Key Mappings
" F2 toogles TabBar
nmap <F2> :NERDTreeTabsToggle<CR>
" LF finds the current file in the tree
nmap LF :NERDTreeFind<CR>

" F3 toogles TabBar
nmap <F3> :TagbarToggle<CR>

" F4 Find word in all files
nmap <F4> :execute "vimgrep /" . expand("<cword>") . "/gj **/*.py" <Bar> cw<CR>

" ; to : while in normal mode 
nnoremap ; :

if &diff
    map <F5> :diffget LOCAL<CR>
    map <F6> :diffget BASE<CR>
    map <F7> :diffget REMOTE<CR>
endif

" Tab navigation
map <C-l> :tabn<CR>
inoremap <C-A-Right> <esc>:tabn<CR><Insert>
map <C-h> :tabprev<CR>
inoremap <C-Left> <ESC>tabprev<CR><Insert>
map <C-n> :tabnew<CR>

" Window navigation
"noremap <C-h> :wincmd h<CR>
"noremap <C-j> :wincmd j<CR>
"noremap <C-k> :wincmd k<CR>
"noremap <C-l> :wincmd l<CR>

" Indent/unindent highlighted block (and maintain highlight)
"
vnoremap <Tab>    >gv
vnoremap <S-Tab>  <gv

" Map Ctrl+P to duplicate visual selection 
"
vmap <C-p> y'>p

""" Highlight excess line length
"
augroup vimrc_autocmds
    autocmd!
    " highlight characters past column 99
    autocmd FileType python highlight Excess ctermbg=DarkGrey guibg=Black
    autocmd FileType python match Excess /\%99v.*/
    autocmd FileType python set nowrap
augroup END

" Include ~/.vimrc_extra, if file exists
let vimrc_extra=expand("~/.vimrc_extra")
if filereadable(vimrc_extra)
    exec ":source " . vimrc_extra
endif

" Imports
call SourceFileIfExist('ale.vim')
call SourceFileIfExist('ack.vim')
call SourceFileIfExist('airline.vim')
call SourceFileIfExist('ale-mappings.vim')
call SourceFileIfExist('closetag.vim')
call SourceFileIfExist('vim-multiple-cursors.vim')
" call SourceFileIfExist('easymotion.vim')
" call SourceFileIfExist('git.vim')
" call SourceFileIfExist('magit.vim')
" call SourceFileIfExist('signify.vim')
" call SourceFileIfExist('supertab.vim')
" call SourceFileIfExist('terminal.vim')
" call SourceFileIfExist('ultisnips.vim')
call SourceFileIfExist('vim-ctrlspace.vim')
" call SourceFileIfExist('vimmove.vim')
" call SourceFileIfExist('vim-rooter.vim')
call SourceFileIfExist('pytest.vim')
call SourceFileIfExist('python.vim')
call SourceFileIfExist('java.vim')
call SourceFileIfExist('vim-test.vim')
call SourceFileIfExist('rust.vim')
call SourceFileIfExist('go.vim')
